#!/usr/bin/env python3
#
# cif client - Connects to the cif REST API
#
import argparse
import os
import sys
import json

import threading
import math
import queue

import requests
import requests.exceptions
import yaml

import cif

__author__ = 'James DeVincentis <james.d@hexhost.net>'


parser = argparse.ArgumentParser(description='Collective Intelligence Framework Client',
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--url', dest='url', nargs='?', type=str, default='http://127.0.0.1:8080',
                    help='CIF REST API URL for connections')
parser.add_argument('query', type=str, help="HTTP query_string style query.")
parser.add_argument('--config', type=str, help="Configuration file path.", default="~/.cif")
parser.add_argument('--token', type=str, help="Token used for authentication.")
group = parser.add_argument_group('Query Options')
group.add_argument('--start', type=int, help="Start at record")
group.add_argument('--count', type=int, help="Get this many records")
group.add_argument('--chunk-size', type=int, help="Get x records at a time from the backend", default=10000)
group.add_argument('--parallel', type=int, default=4, help="Make X requests at one time")

# Debugging options not supported yet
# group = parser.add_argument_group('Debugging Options')
# group.add_argument('--show-request', dest='show_request', action="store_true",
#                   help='Shows the HTTP headers used when making the request')
# group.add_argument('--show-response', dest='show_response', action="store_true",
#                   help='Shows the HTTP headers the server responded with')

group = parser.add_argument_group('Output Options')
group.add_argument('--format', dest='format', choices=cif.client.formatters.list, default="table",
                   help="Output in this format. Custom can be defined using --format-string 'column,column2,...', "
                        "single will use the first column specified in 'select', by default it is 'observable'")
group.add_argument('--select', dest='select', help='Comma separated list of columns to display.',
                   default='timestamp,otype,observable,tags')
group.add_argument('--format-string', dest='format_string',
                   help="Python style string for formatting. Requires --select. Example: '{0},{1},{2}'")
group.add_argument('--write', dest='write', help='Filename to write output to instead of stdout')

options = vars(parser.parse_args())
config = None

# Only overwrite non-command line existent options
config_path = os.path.expanduser(options['config'])
if os.path.exists(os.path.expanduser(options['config'])):
    with open(config_path, 'r') as stream:
        config = yaml.load(stream)
    for key, value in config.items():
        if key not in options or options[key] is None:
            options[key] = value

request_headers = {}

if options['start'] is None:
    options['start'] = 0

if options['count'] is not None:
    options['end'] = options['start'] + options['count']
    if options['start'] + options['chunk_size'] > options['end']:
        options['chunk_size'] = options['end'] - options['start']
else:
    options['end'] = None

if options["token"] is not None:
    request_headers['Authorization'] = options["token"]

results_lock = threading.Lock()
request_queue = queue.Queue()
results_list = []


def do_request():
    while True:
        task = request_queue.get()
        if task is None:
            request_queue.task_done()
            break
        try:
            resp = requests.get(task['url'], headers=request_headers, stream=True)
        except requests.exceptions.ConnectionError as ex:
            sys.stderr.write("[ERROR] Could not make request to CIF Server: {0}\n".format(ex))
            request_queue.task_done()
            continue

        if resp.status_code == 200:
            try:
                result = json.loads(resp.text)
                results_lock.acquire()
                results_list[task['index']] = result
            except Exception as ex:
                raise RuntimeError("Could not fetch results from successful query") from ex
            finally:
                results_lock.release()

        elif resp.status_code == 404:
            break

        elif resp.status_code == 401:
            raise RuntimeError("Invalid Authentication: {0}".format(resp.text))

        elif resp.status_code == 400:
            raise RuntimeError("Invalid Query: {0}".format(resp.text))

        request_queue.task_done()


# Make a HEAD request to get the count of observables
try:
    response = requests.head('{0}/observables?{1}'.format(options['url'], options['query']), headers=request_headers)
except requests.exceptions.ConnectionError as e:
    sys.stderr.write("[ERROR] Could not make request to CIF Server: {0}\n".format(e))
    sys.exit(1)
observable_count = 0
if response.status_code == 200:
    observable_count = int(response.headers['content-length'])
elif response.status_code == 404 or options['start'] > int(response.headers['content-length']):
    observable_count = 0
elif response.status_code == 401:
    raise RuntimeError("Invalid Authentication: {0}".format(response.text))
elif response.status_code == 400:
    raise RuntimeError("Invalid Query: {0}".format(response.text))

if options['end'] is not None:
    # Calculate thee number of requests to make based on start / end options
    request_count = math.ceil((options['end'] - options['start']) / options['chunk_size'])
else:
    # Calculate the number of requests we are going to have to make
    request_count = math.ceil((observable_count - options['start']) / options['chunk_size'])

for x in range(0, request_count):
    results_list.append(None)

for x in range(0, request_count):
    request_queue.put({'index': x, 'url': '{0}/observables?start={1}&count={2}&{3}'.format(
        options['url'], options['start'], options['chunk_size'], options['query'])})

    options['start'] += options['chunk_size']

    if options['end'] is not None:
        if options['start'] >= options['end']:
            break
        elif options['start'] + options['chunk_size'] > options['end']:
            options['chunk_size'] = options['end'] - options['start']

for x in range(0, options['parallel']):
    request_queue.put(None)

workers = []
for x in range(0, options['parallel']):
    worker = threading.Thread(target=do_request)
    worker.daemon = True
    worker.start()
    workers.append(worker)

for worker in workers:
    worker.join()

# Merge the results
final_results = []
for i, v in enumerate(results_list):
    if v is None:
        continue
    final_results.extend(v)

if options['write'] is not None:
    outputhandle = open(options['write'], 'wt', newline='')
else:
    outputhandle = sys.stdout

# Use the output handler to write the results
cif.client.formatters.formatters[options['format']](options, final_results, outputhandle)
